# Default values for sentry.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: sentry
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "8.10.0"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

environmentVariables:
 - name: SENTRY_POSTGRES_HOST
   value: 'sentry-postgresql'
 - name: SENTRY_DB_USER
   value: 'postgres'
 - name: 'SENTRY_SECRET_KEY'
   value: "j44@64jw0oi_smeool!(r%6)c%5bb1m5==j^-n1#hi4f-v2i53"
 - name: SENTRY_DB_PASSWORD 
   valueFrom:
     secretKeyRef:
       name: 'sentry-postgresql'
       key: 'postgres-password'
 - name: SENTRY_REDIS_PASSWORD 
   valueFrom:
     secretKeyRef:
       name: 'sentry-redis'
       key: 'redis-password'
 - name: SENTRY_REDIS_HOST
   value: 'sentry-redis-master'

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: 
  runAsUser: 999
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true

sentryWeb:
  command:
    - "/bin/sh"
    - "-c"
    - "sentry upgrade --noinput && sentry run web"

sentryWorker:
  command:
    - "/bin/sh"
    - "-c"
    - "sentry upgrade --noinput && sentry run worker"

service:
  type: ClusterIP
  port: 9000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

clickHouse:
  nameOverride: "clickhouse"
  image:
    repository: yandex/clickhouse-server
    tag: 20.3.9.70
    pullPolicy: ""
  podAnnotations: {}
  imagePullSecrets: []
  serviceAccount:
    name: clickhouse
  environmentVariables:
  - name: MAX_MEMORY_USAGE_RATIO
    value: "0.3"
  containerPorts:
  - containerPort: 9000
  - containerPort: 9009
  - containerPort: 8123
  service:
  - name: clickhouse-9000
    port: 9000
    protocol: TCP
    targetPort: 9009
  - name: clickhouse-9009
    port: 9009
    protocol: TCP
    targetPort: 9009
  - name: clickhouse-8123
    port: 8123
    protocol: TCP
    targetPort: 8123
  volumes:
  - name: clickhouse
    mountPath: /var/lib/clickhouse
  volumeClaimTemplates: 
   - metadata:
      name: clickhouse
     spec:
       accessModes: [ "ReadWriteOnce" ]
       storageClassName: "standard-rwo"
       resources:
         requests:
           storage: 10Gi 
 # - apiVersion: v1
 #   kind: PersistentVolumeClaim
 #   metadata:
 #     creationTimestamp: null
 #     name: clickHouse
 #   spec:
 #     accessModes:
 #       - ReadWriteOnce
 #     resources:
 #       requests:
 #         storage: 8Gi
 #     volumeMode: Filesystem
postgresql:
  image:
    tag: "12.9.0-debian-10-r87"